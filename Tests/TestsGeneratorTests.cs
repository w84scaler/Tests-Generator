using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.IO;

using TestsGeneratorLib;

namespace Tests
{
    [TestClass]
    public class TestsGeneratorTests
    {
        private List<SyntaxNode> roots;
        private List<string> methodList;

        [TestInitialize]
        public void Setup()
        {
            methodList = new List<string>() { "CanGenerateTest", "GenerateTest" };

            TestsGenerator generator = new TestsGenerator();
            List<TestFile> testFiles = generator.CreateTests(File.ReadAllText("ListGenerator.cs"));
            roots = new List<SyntaxNode>();
            foreach (TestFile testFile in testFiles)
            {
                roots.Add(CSharpSyntaxTree.ParseText(testFile.Code).GetRoot());
            }
        }

        [TestMethod]
        public void FilesTest()
        {
            Assert.AreEqual(1, roots.Count, "wrong files count");
        }

        [TestMethod]
        public void ClassTest()
        {
            IEnumerable<ClassDeclarationSyntax> classes = roots[0].DescendantNodes().OfType<ClassDeclarationSyntax>();
            Assert.AreEqual(1, classes.Count(), "wrong classes count");
            foreach (ClassDeclarationSyntax _class in classes)
            {
                Assert.IsTrue(_class.Modifiers.Any(SyntaxKind.PublicKeyword), "non-public class");
                Assert.AreEqual(_class.Members.Count, 2, "wrong method count in class");
                Assert.AreEqual(_class.Identifier.ValueText, "ListGeneratorTest", "wrong class name");
                Assert.AreEqual(_class.AttributeLists.ToString(), "[TestClass]", "wrong class attribute");
            }
        }

        [TestMethod]
        public void MethodTest()
        {
            IEnumerable<MethodDeclarationSyntax> methods = roots[0].DescendantNodes().OfType<MethodDeclarationSyntax>();
            Assert.AreEqual(2, methods.Count(), "wrong methods count");
            foreach (MethodDeclarationSyntax method in methods)
            {
                methodList.Remove(method.Identifier.ValueText);
                Assert.IsTrue(method.Modifiers.Any(SyntaxKind.PublicKeyword), "non-public method");
                Assert.AreEqual(method.ReturnType.ToString(), "void", "non-void method");
                Assert.AreEqual(method.AttributeLists.ToString(), "[TestMethod]", "wrong method attribute");
                Assert.AreEqual(method.Body.Statements.ToString(), "Assert.Fail(\"autogenerated\");", "wrong method code");
            }
            Assert.AreEqual(0, methodList.Count, "wrong method names");
        }

        [TestMethod]
        public void UsingTest()
        {
            IEnumerable<UsingDirectiveSyntax> usings = roots[0].DescendantNodes().OfType<UsingDirectiveSyntax>();
            Assert.AreEqual(1, usings.Count(), "wrong usings count");
            foreach (UsingDirectiveSyntax _using in usings)
            {
                Assert.AreEqual("Microsoft.VisualStudio.TestTools.UnitTesting", _using.Name.ToString(), "wrong using name");
            }
        }
    }
}
