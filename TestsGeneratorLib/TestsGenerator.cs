using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGeneratorLib
{
    public class TestsGenerator
    {
        public List<TestFile> CreateTests(string sourceCode)
        {
            List<TestFile> list = new List<TestFile>();
            SyntaxNode root = CSharpSyntaxTree.ParseText(sourceCode).GetRoot();
            foreach (ClassDeclarationSyntax cds in root.DescendantNodes().OfType<ClassDeclarationSyntax>())
            {
                ClassDeclarationSyntax testClass = CreateTestClass(cds.Identifier.ValueText);
                IEnumerable<MethodDeclarationSyntax> methods = cds.DescendantNodes().OfType<MethodDeclarationSyntax>().Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword));
                foreach (MethodDeclarationSyntax method in methods)
                {
                    testClass = testClass.AddMembers(CreateTestMethod(method.Identifier.ValueText));
                }
                CompilationUnitSyntax unit = CompilationUnit().WithUsings(GetUsings()).AddMembers(NamespaceDeclaration(ParseName("tests")).AddMembers(testClass));
                list.Add(new TestFile($"{cds.Identifier.ValueText}Tests.cs", unit.NormalizeWhitespace().ToFullString()));
            }
            return list;
        }

        private static SyntaxList<UsingDirectiveSyntax> GetUsings()
        {
            List<UsingDirectiveSyntax> defaultUsings = new List<UsingDirectiveSyntax>
            {
                UsingDirective(QualifiedName(QualifiedName(QualifiedName(IdentifierName("Microsoft"),IdentifierName("VisualStudio")),IdentifierName("TestTools")),IdentifierName("UnitTesting")))
            };
            return List(defaultUsings);
        }

        private ClassDeclarationSyntax CreateTestClass(string className)
        {
            AttributeSyntax attr = Attribute(ParseName("TestClass"));
            ClassDeclarationSyntax testClass = ClassDeclaration(className + "Test").
                                               AddModifiers(Token(SyntaxKind.PublicKeyword)).
                                               AddAttributeLists(AttributeList().AddAttributes(attr));
            return testClass;
        }

        private MethodDeclarationSyntax CreateTestMethod(string methodName)
        {
            AttributeSyntax attr = Attribute(ParseName("TestMethod"));
            MethodDeclarationSyntax testMethod = MethodDeclaration(ParseTypeName("void"), methodName + "Test").
                                                 AddModifiers(Token(SyntaxKind.PublicKeyword)).
                                                 AddBodyStatements(EmptyTestSyntax()).
                                                 AddAttributeLists(AttributeList().AddAttributes(attr));
            return testMethod;
        }

        private StatementSyntax[] EmptyTestSyntax()
        {
            StatementSyntax[] code = { ParseStatement("Assert.Fail(\"autogenerated\");") };
            return code;
        }
    }
}